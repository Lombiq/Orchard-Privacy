@model ConsentBannerSettingsViewModel


<legend>@T["Consent Banner Settings"]</legend>
<fieldset>
    <label asp-for="ConsentBannerSettingsText"> @T["Privacy consent text"]</label>
    <textarea asp-for="ConsentBannerSettingsText" rows="5" class="form-control content-preview-text"></textarea>
    <span class="hint">@T["Set the text of privacy consent banner."]</span>
</fieldset>



<style asp-name="codemirror"></style>
<script asp-name="codemirror" depends-on="admin" at="Foot"></script>
<script asp-name="codemirror-addon-display-autorefresh" at="Foot"></script>
<script asp-name="codemirror-addon-edit-closetag" at="Foot"></script>
<script asp-name="codemirror-addon-selection-active-line" at="Foot"></script>
<script asp-name="codemirror-mode-css" at="Foot"></script>
<script asp-name="codemirror-mode-htmlmixed" at="Foot"></script>
<script asp-name="codemirror-mode-javascript" at="Foot"></script>
<script asp-name="codemirror-mode-xml" at="Foot"></script>
<script at="Foot">
    $(function () {
        var optionsTextArea = document.getElementById('@Html.IdFor(x => x.ConsentBannerSettingsText)');
        @* When part rendered by a flow part only the elements scripts are rendered, so the html element will not exist. *@
        if (optionsTextArea) {
            var editor = CodeMirror.fromTextArea(optionsTextArea, {
                autoCloseTags: true,
                autoRefresh: true,
                lineNumbers: true,
                lineWrapping: true,
                matchBrackets: true,
                styleActiveLine: true,
                mode: { name: "htmlmixed" }
            });

            initializeCodeMirrorShortcodeWrapper(editor);

            editor.on('change', function(cmEditor){
                cmEditor.save();
                $(document).trigger('contentpreview:render');
            });
        }
    });
</script>
