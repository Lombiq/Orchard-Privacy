name: publish

on:
  workflow_call:
    inputs: 
      source:
        required: false
        type: string
    secrets:
      # We can't access org secrets here so they need to be passed in, see:
      # https://github.community/t/resuable-called-workflow-environment-variables-secrets-and-trigger-event-access/207723/2
      API_KEY:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: haya14busa/action-cond@v1
        id: sourceeval
        with:
          cond: ${{ inputs.source == '' }}
          if_true: "https://api.nuget.org/v3/index.json"
          if_false: "${{ inputs.source }}"
      - name: Print source
        run: echo Nuget Source:${{ steps.sourceeval.outputs.value }}
      - name: Get the version
        id: get_version
        run: |
          VERSION="${GITHUB_REF_NAME//v}"
          echo VERSION:${VERSION}
          echo ::set-output name=VERSION::${VERSION}         
      - uses: actions/checkout@v2    
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.*
      - name: Add Source Link package
        id: add_source_link_package
        run: |
          # Never edit this on its own. First update and test the scripts/add-package.sh file, then
          # copy the `program` function here and call it with `program Microsoft.SourceLink.GitHub`.
          function program() {

              package_name="$1"

              function err() {
                  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $*" >&2
              }

              function panic() {
                  error_code="$1"
                  shift

                  for line in "$@"; do
                      err "$line"
                  done

                  exit "$error_code"
              }

              function alter-solution() {
                  solution_file="$1"
                  [ -f "$solution_file" ] || panic 1 "Couldn't find the solution '$solution_file' in '$PWD'."

                  for project_path in $(dotnet sln "$solution_file" list | sed '1,2 D'); do
                      directory="$(dirname "$solution_file")/$(dirname "$project_path")"

                      pushd "$directory" || panic 2 "Couldn't open the project directory '$directory'."
                      alter-project "$(basename "$project_path")"
                      popd || panic 3 "Couldn't return to the original directory."
                  done
              }

              function alter-project() {
                  project_file="$1"
                  [ -f "$project_file" ] || panic 4 "Couldn't find the project '$project_file' in '$PWD'."

                  dotnet add "$project_file" package "$package_name"
              }

              if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
                  echo
                  basename "$0"
                  echo
                  echo "USAGE"
                  echo -e "\tbash $(basename "$0") package_name [solution.sln]\n"
                  echo "package_name - The name of a NuGet package. The same you'd pass to 'dotnet add package'."
                  echo "solution.sln - Optional argument to provide the path to the solution file. If none are"
                  echo "               provided then the script looks for .sln or if none found then for .??proj"
                  echo "               (i.e. csproj, fsproj, vbproj) in the current working directory."
              else
                  # The NuGetBuild property need to set so we don't get errors due to wrong references that are targeted at
                  # non-NuGet builds.
                  printf "<Project>\n  <PropertyGroup>\n    <NuGetBuild>true</NuGetBuild>\n  </PropertyGroup>\n</Project>" > Directory.Build.props
                  
                  if [ -f "$2" ]; then
                      alter-solution "$2"
                  elif solutions=(./*.sln) && ((${#solutions[@]})) && [ -f "${solutions[0]}" ]; then
                      for solution in "${solutions[@]}"; do
                          alter-solution "$solution"
                      done
                  else
                      for project in ./*.??proj; do
                          alter-project "$project"
                      done
                  fi
              fi

          }
          program Microsoft.SourceLink.GitHub
      - name: Install dependencies
        run: dotnet restore -p:NuGetBuild=true
      - name: Build
        # Notes on the configuration:
        # * -p:NuGetBuild=true is our property to load Lombiq dependencies from NuGet by switching project references
        #   to package references.
        # * -p:GenerateDocumentationFile=True is for generating XML doc files. Needed both for build and pack. It'd 
        #   cause CS* warnings but we hande that centrally from .NET Analyzers so disabling them here.
        # * VSTHRD* rules come from somewhere unknown, disabling them.
        # * -p:EnableNETAnalyzers=false is to disable further .NET analyzer we don't need here.
        # * -p:ContinuousIntegrationBuild=true is needed for Deterministic Builds:
        #   https://github.com/clairernovotny/DeterministicBuilds.
        # * -p:DebugSymbols=true and -p:DebugType=portable are needed to generate PDB files.
        run: dotnet build --verbosity detailed --configuration Release --no-restore -p:NuGetBuild=true -p:LangVersion=Latest -p:GenerateDocumentationFile=True -p:NoWarn=CS1573%3BCS1591%3BVSTHRD002%3BVSTHRD200 -p:EnableNETAnalyzers=false -p:ContinuousIntegrationBuild=true -p:DebugSymbols=true -p:DebugType=portable
      - name: Pack
        # Notes on the configuration apart from what's also for dotnet build:
        # * NoWarn on NU5104 to not have warnings for prerelease dependencies, see: 
        #   https://docs.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5104.
        # * -p:WarnOnPackingNonPackableProject=True will cause a build warning (converted to error) if we try to pack
        #   a non-packagable project.
        # * -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg are needed to generate symbol packages:
        #   https://docs.microsoft.com/en-us/nuget/create-packages/symbol-packages-snupkg.
        run: dotnet pack --output artifacts --configuration Release --no-restore --no-build -p:NuGetBuild=true -p:Version=${{ steps.get_version.outputs.VERSION }} -p:GenerateDocumentationFile=True -p:NoWarn=NU5104 -p:TreatWarningsAsErrors=true -warnaserror -p:WarnOnPackingNonPackableProject=True -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
      - name: Push with dotnet
        run: dotnet nuget push artifacts/*.nupkg --api-key ${{ secrets.API_KEY }} --source ${{ steps.sourceeval.outputs.value }} --skip-duplicate
      - name: Archive artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts          
